<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on Ice's Wonder</title><link>https://student-ice.github.io/posts/</link><description>Recent content in Posts on Ice's Wonder</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 13 Sep 2023 13:38:13 +0800</lastBuildDate><atom:link href="https://student-ice.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>浅尝openapi Generator</title><link>https://student-ice.github.io/posts/%E6%B5%85%E5%B0%9Dopenapi-generator/</link><pubDate>Wed, 13 Sep 2023 13:38:13 +0800</pubDate><guid>https://student-ice.github.io/posts/%E6%B5%85%E5%B0%9Dopenapi-generator/</guid><description>最近看到深度之家项目使用openapi-generator生成http api, 供客户端调用用，于是很好奇这是什么，经过了一番研究，才发现他其实就是可以根据OpenAPI规范（以前称为Swagger规范）生成各种编程语言的HTTP API客户端、服务器端代码和文档的一个工具。
我正好最近在用Qt开发一个网易云音乐客户端，所以就想着能不能也想深度之家那样用openapi-generator生成http api。 说干就干，首先去看了看官方文档，写的很详细了。使用方法有很多，我这里选择安装个CLI。
我这里使用npm安装CLI,直接执行下面的命令，全局安装：
sudo npm install @openapitools/openapi-generator-cli -g 然后根据符合OpenAPI规范的、有效的API文档生成客户端代码:
openapi-generator-cli generate \ -i doc_path \ # 符合OpenAPI规范的API文档(json格式或者yaml格式) -o code_path \ # 要生成的客户端代码路径 -g cpp-qt-client \ # 使用指定的生成器生成代码。 --additional-properties=&amp;#34;optionalProjectFile=false,modelNamePrefix=D,packageName=QtDAPI,cppNamespace=DAPI&amp;#34; # 额外的参数 额外参数的含义可以到官方文档/generators/cpp-qt-client查看。
执行这个命令后就可以在指定的目录下看到生成的代码。
$ tree 3rdparty//client 3rdparty/API ├── README.md └── Config.cmake.in └── CMakeLists.txt └── DClientApi.h └── DClientApi.cpp ......... 然后在代码中就可以调用了，使用方法可以参考生成的README.md</description></item><item><title>Hugo搭建个人博客网站</title><link>https://student-ice.github.io/posts/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/</link><pubDate>Fri, 08 Sep 2023 08:57:38 +0800</pubDate><guid>https://student-ice.github.io/posts/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/</guid><description>前言 Hugo 是一款基于 Go 语言而实现的静态网站生成器，具有简单易用、高效易扩展、快速部署的特点。 这里先给出 Hugo 的中英文官方文档，方便大家遇到问题时查阅：
Hugo 中文文档 Hugo 英文文档
接下来就来看看，如何利用 Hugo 来搭建一个博客。
1. 安装Hugo 当你打开Hugo的Github Release页面后，你会看到各个版本的Hugo安装包。选择最新的版本是一个明智的选择，因为它通常包含了最新的功能和修复的bug。
在选择版本后，你需要根据你当前的操作系统选择对应的安装包进行下载。Hugo提供了多种操作系统的安装包，包括Windows、macOS和Linux。确保选择与你的操作系统兼容的安装包。
安装完成后，你可以在命令行中输入hugo version来验证Hugo是否成功安装并显示当前安装的版本号。如果成功显示版本号，则说明Hugo已经安装成功。
$ hugo version hugo v0.118.2-da7983ac4b94d97d776d7c2405040de97e95c03d linux/amd64 BuildDate=2023-08-31T11:23:51Z VendorInfo=gohugoio 现在你已经成功安装了Hugo，你可以开始使用它来创建和管理静态网站了。
2. 创建博客目录 初始化网站目录 $ hugo new site blog 初始化之后，得到的，目录结构如下:
$ tree blog blog ├── archetypes │ └── default.md ├── assets ├── content ├── data ├── hugo.toml ├── i18n ├── layouts ├── static └── themes 这里需要注意的是hugo.toml,这个配置文件是用来配置Hugo的一些全局参数的。这个文件默认有以下三个配置:
baseURL = &amp;#39;https://example.org/&amp;#39; languageCode = &amp;#39;en-us&amp;#39; title = &amp;#39;My New Hugo Site&amp;#39; 我不太喜欢toml的语法,所以我把它改成了hugo.</description></item></channel></rss>