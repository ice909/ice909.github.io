[{"content":"最近我开发了一个使用 QtQuick 技术的音乐播放器，其中大量使用 Image 组件显示网络图片，且图片尺寸较大（大部分超过 1000×1000 像素）。运行后发现内存占用很高，仅首页图片加载完就占用了 500MB，多页面叠加显示后，内存占用轻松突破 1GB。\n显然，这样的内存占用是不可接受的，必须优化。经过搜索，我发现了QML 的图片加载，内存优化研究这篇文章，提到给 Image 设置sourceSize属性可以减少内存占用。于是我查阅了官方文档：\nThis property holds the scaled width and height of the full-frame image. Unlike the width and height properties, which scale the painting of the image, this property sets the maximum number of pixels stored for the loaded image so that large images do not use more memory than necessary. For example, this ensures the image in memory is no larger than 1024x1024 pixels, regardless of the Image\u0026#39;s width and height values: Rectangle { width: ... height: ... Image { anchors.fill: parent source: \u0026#34;reallyBigImage.jpg\u0026#34; sourceSize.width: 1024 sourceSize.height: 1024 } } 我尝试将 Image 的 sourceSize 设置为 400x400，再次启动程序，发现内存占用骤减，首页内存占用降至 79.3MB。\n因此，如果你的图像非常大，并且只需要显示图像的一部分或缩小后的版本，设置 sourceSize 属性可以显著减少内存占用。但如果需要显示完整图像且图像不大，设置 sourceSize 可能不会显著减少内存占用。\n总之，设置 sourceSize 属性在某些情况下可以减少内存占用，但具体效果取决于图像大小和显示需求。\n","permalink":"https://ice909.github.io/posts/qtquick%E7%9A%84image%E7%BB%84%E4%BB%B6%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96/","summary":"\u003cp\u003e最近我开发了一个使用 QtQuick 技术的音乐播放器，其中大量使用 Image 组件显示网络图片，且图片尺寸较大（大部分超过 1000×1000 像素）。运行后发现内存占用很高，仅首页图片加载完就占用了 500MB，多页面叠加显示后，内存占用轻松突破 1GB。\u003c/p\u003e\n\u003cp\u003e\u003cimg loading=\"lazy\" src=\"/images/memory.png\" alt=\"memory\"  /\u003e\n\u003c/p\u003e\n\u003cp\u003e显然，这样的内存占用是不可接受的，必须优化。经过搜索，我发现了\u003ca href=\"https://blog.csdn.net/weixin_39039435/article/details/125832449\"\u003eQML 的图片加载，内存优化研究\u003c/a\u003e这篇文章，提到给 Image 设置\u003ccode\u003esourceSize\u003c/code\u003e属性可以减少内存占用。于是我查阅了官方文档：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eThis property holds the scaled width and height of the full-frame image.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eUnlike the width and height properties, which scale the painting of the image,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ethis property sets the maximum number of pixels stored for the loaded image\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eso that large images do not use more memory than necessary.\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eFor example, this ensures the image in memory is no larger than 1024x1024 pixels,\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eregardless of the Image\u0026#39;s width and height values:\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e Rectangle {\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     width: ...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     height: ...\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     Image {\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        anchors.fill: parent\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        source: \u0026#34;reallyBigImage.jpg\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        sourceSize.width: 1024\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        sourceSize.height: 1024\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e     }\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e }\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e我尝试将 Image 的 sourceSize 设置为 400x400，再次启动程序，发现内存占用骤减，首页内存占用降至 79.3MB。\u003c/p\u003e","title":"QtQuick的Image组件内存优化"},{"content":"最近看到深度之家项目使用 openapi-generator 生成 HTTP API 供客户端调用，于是很好奇这是什么。经过研究发现，openapi-generator 是一个根据 OpenAPI 规范（以前称为 Swagger 规范）生成各种编程语言的 HTTP API 客户端、服务器端代码和文档的工具。\n我最近在用 Qt 开发一个网易云音乐客户端，所以想尝试用 openapi-generator 生成 HTTP API。首先查看了官方文档，写得很详细。我使用 npm 安装 CLI，执行以下命令进行全局安装：\nsudo npm install @openapitools/openapi-generator-cli -g 然后根据符合 OpenAPI 规范的、有效的 API 文档生成客户端代码:\nopenapi-generator-cli generate \\ -i doc_path \\ # 符合OpenAPI规范的API文档(json格式或者yaml格式) -o code_path \\ # 要生成的客户端代码路径 -g cpp-qt-client \\ # 使用指定的生成器生成代码。 --additional-properties=\u0026#34;optionalProjectFile=false,modelNamePrefix=D,packageName=QtDAPI,cppNamespace=DAPI\u0026#34; # 额外的参数 额外参数的含义可以到官方文档/generators/cpp-qt-client查看。\n执行命令后，可以在指定目录下看到生成的代码：\n$ tree 3rdparty/client 3rdparty/API ├── README.md └── Config.cmake.in └── CMakeLists.txt └── DClientApi.h └── DClientApi.cpp ......... 然后在代码中调用生成的 API，使用方法可以参考生成的 README.md。\n","permalink":"https://ice909.github.io/posts/%E6%B5%85%E5%B0%9Dopenapi-generator/","summary":"\u003cp\u003e最近看到\u003ca href=\"https://github.com/linuxdeepin/deepin-home\"\u003e深度之家\u003c/a\u003e项目使用 openapi-generator 生成 HTTP API 供客户端调用，于是很好奇这是什么。经过研究发现，openapi-generator 是一个根据 OpenAPI 规范（以前称为 Swagger 规范）生成各种编程语言的 HTTP API 客户端、服务器端代码和文档的工具。\u003c/p\u003e\n\u003cp\u003e我最近在用 Qt 开发一个网易云音乐客户端，所以想尝试用 openapi-generator 生成 HTTP API。首先查看了\u003ca href=\"https://openapi-generator.tech/docs/installation\"\u003e官方文档\u003c/a\u003e，写得很详细。我使用 npm 安装 CLI，执行以下命令进行全局安装：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003esudo npm install @openapitools/openapi-generator-cli -g\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e然后根据符合 OpenAPI 规范的、有效的 API 文档生成客户端代码:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eopenapi-generator-cli generate \u003cspan class=\"se\"\u003e\\\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"se\"\u003e\u003c/span\u003e    -i doc_path \u003cspan class=\"se\"\u003e\\ \u003c/span\u003e      \u003cspan class=\"c1\"\u003e# 符合OpenAPI规范的API文档(json格式或者yaml格式)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    -o code_path \u003cspan class=\"se\"\u003e\\ \u003c/span\u003e     \u003cspan class=\"c1\"\u003e# 要生成的客户端代码路径\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    -g cpp-qt-client \u003cspan class=\"se\"\u003e\\ \u003c/span\u003e \u003cspan class=\"c1\"\u003e# 使用指定的生成器生成代码。\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    --additional-properties\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;optionalProjectFile=false,modelNamePrefix=D,packageName=QtDAPI,cppNamespace=DAPI\u0026#34;\u003c/span\u003e \u003cspan class=\"c1\"\u003e# 额外的参数\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e额外参数的含义可以到\u003ca href=\"https://openapi-generator.tech/docs/generators/cpp-qt-client\"\u003e官方文档/generators/cpp-qt-client\u003c/a\u003e查看。\u003c/p\u003e\n\u003cp\u003e执行命令后，可以在指定目录下看到生成的代码：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ tree 3rdparty/client\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e3rdparty/API\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e├── README.md\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e└── Config.cmake.in\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e└── CMakeLists.txt\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e└── DClientApi.h\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e└── DClientApi.cpp\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e.........\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e然后在代码中调用生成的 API，使用方法可以参考生成的 README.md。\u003c/p\u003e","title":"浅尝openapi Generator"},{"content":"前言 Hugo 是一款基于 Go 语言而实现的静态网站生成器，具有简单易用、高效易扩展、快速部署的特点。 这里先给出 Hugo 的中英文官方文档，方便大家遇到问题时查阅：\nHugo 中文文档 Hugo 英文文档\n接下来就来看看，如何利用 Hugo 来搭建一个博客。\n1. 安装Hugo 当你打开Hugo的Github Release页面后，你会看到各个版本的Hugo安装包。选择最新的版本是一个明智的选择，因为它通常包含了最新的功能和修复的bug。\n在选择版本后，你需要根据你当前的操作系统选择对应的安装包进行下载。Hugo提供了多种操作系统的安装包，包括Windows、macOS和Linux。确保选择与你的操作系统兼容的安装包。\n安装完成后，你可以在命令行中输入hugo version来验证Hugo是否成功安装并显示当前安装的版本号。如果成功显示版本号，则说明Hugo已经安装成功。\n$ hugo version hugo v0.118.2-da7983ac4b94d97d776d7c2405040de97e95c03d linux/amd64 BuildDate=2023-08-31T11:23:51Z VendorInfo=gohugoio 现在你已经成功安装了Hugo，你可以开始使用它来创建和管理静态网站了。\n2. 创建博客目录 初始化网站目录 $ hugo new site blog 初始化之后，得到的，目录结构如下:\n$ tree blog blog ├── archetypes │ └── default.md ├── assets ├── content ├── data ├── hugo.toml ├── i18n ├── layouts ├── static └── themes 这里需要注意的是hugo.toml,这个配置文件是用来配置Hugo的一些全局参数的。这个文件默认有以下三个配置:\nbaseURL = \u0026#39;https://example.org/\u0026#39; languageCode = \u0026#39;en-us\u0026#39; title = \u0026#39;My New Hugo Site\u0026#39; 我不太喜欢toml的语法,所以我把它改成了hugo.yaml。\nbaseURL: \u0026#39;https://example.org/\u0026#39; languageCode: \u0026#39;en-us\u0026#39; title: \u0026#39;My New Hugo Site\u0026#39; 3. 安装主题 可以去Hugo官网找到你想要的主题,这里我选择了PaperMod主题，然后利用如下命令将主题下载到项目根目录的themes文件夹中:\ngit submodule add https://github.com/adityatelange/hugo-PaperMod themes/papermod 4. 配置主题 修改hugo.yaml文件\nbaseURL: \u0026#39;https://example.org/\u0026#39; languageCode: \u0026#39;en-us\u0026#39; title: \u0026#39;My New Hugo Site\u0026#39; theme: \u0026#39;papermod\u0026#39; # 设置主题 5. 预览网站 hugo server 运行hugo server后，浏览器打开http://localhost:1313/就可以看到你的网站了。\n因为还没有添加文章，所以内容会是空白的\n总结 以上就是利用Hugo搭建个人博客网站的基本步骤。\n希望大家博客网站搭建好之后，也可以开始写作和分享自己的想法和经验。\n","permalink":"https://ice909.github.io/posts/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/","summary":"\u003ch2 id=\"前言\"\u003e前言\u003c/h2\u003e\n\u003cp\u003eHugo 是一款基于 Go 语言而实现的静态网站生成器，具有简单易用、高效易扩展、快速部署的特点。\n这里先给出 Hugo 的中英文官方文档，方便大家遇到问题时查阅：\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://www.gohugo.org/doc/\"\u003eHugo 中文文档\u003c/a\u003e\n\u003ca href=\"https://gohugo.io/documentation/\"\u003eHugo 英文文档\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e接下来就来看看，如何利用 Hugo 来搭建一个博客。\u003c/p\u003e\n\u003ch2 id=\"1-安装hugo\"\u003e1. 安装Hugo\u003c/h2\u003e\n\u003cp\u003e当你打开Hugo的\u003ca href=\"https://github.com/gohugoio/hugo/releases/\"\u003eGithub Release\u003c/a\u003e页面后，你会看到各个版本的Hugo安装包。选择最新的版本是一个明智的选择，因为它通常包含了最新的功能和修复的bug。\u003c/p\u003e\n\u003cp\u003e在选择版本后，你需要根据你当前的操作系统选择对应的安装包进行下载。Hugo提供了多种操作系统的安装包，包括Windows、macOS和Linux。确保选择与你的操作系统兼容的安装包。\u003c/p\u003e\n\u003cp\u003e安装完成后，你可以在命令行中输入hugo version来验证Hugo是否成功安装并显示当前安装的版本号。如果成功显示版本号，则说明Hugo已经安装成功。\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ hugo version\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ehugo v0.118.2-da7983ac4b94d97d776d7c2405040de97e95c03d linux/amd64 \u003cspan class=\"nv\"\u003eBuildDate\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e2023-08-31T11:23:51Z \u003cspan class=\"nv\"\u003eVendorInfo\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003egohugoio\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e现在你已经成功安装了Hugo，你可以开始使用它来创建和管理静态网站了。\u003c/p\u003e\n\u003ch2 id=\"2-创建博客目录\"\u003e2. 创建博客目录\u003c/h2\u003e\n\u003cp\u003e初始化网站目录\n$ hugo new site blog\n初始化之后，得到的，目录结构如下:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ tree blog\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003eblog\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e├── archetypes\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e│   └── default.md\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e├── assets\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e├── content\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e├── data\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e├── hugo.toml\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e├── i18n\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e├── layouts\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e├── static\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e└── themes\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e这里需要注意的是hugo.toml,这个配置文件是用来配置Hugo的一些全局参数的。这个文件默认有以下三个配置:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003ebaseURL\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;https://example.org/\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003elanguageCode\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;en-us\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nv\"\u003etitle\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;My New Hugo Site\u0026#39;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e我不太喜欢toml的语法,所以我把它改成了hugo.yaml。\u003c/p\u003e","title":"Hugo搭建个人博客网站"},{"content":"","permalink":"https://ice909.github.io/about/","summary":"about","title":"About"}]