[{"content":"最近看到深度之家项目使用openapi-generator生成http api, 供客户端调用用，于是很好奇这是什么，经过了一番研究，才发现他其实就是可以根据OpenAPI规范（以前称为Swagger规范）生成各种编程语言的HTTP API客户端、服务器端代码和文档的一个工具。\n我正好最近在用Qt开发一个网易云音乐客户端，所以就想着能不能也想深度之家那样用openapi-generator生成http api。 说干就干，首先去看了看官方文档，写的很详细了。使用方法有很多，我这里选择安装个CLI。\n我这里使用npm安装CLI,直接执行下面的命令，全局安装：\nsudo npm install @openapitools/openapi-generator-cli -g 然后根据符合OpenAPI规范的、有效的API文档生成客户端代码:\nopenapi-generator-cli generate \\ -i doc_path \\ # 符合OpenAPI规范的API文档(json格式或者yaml格式) -o code_path \\ # 要生成的客户端代码路径 -g cpp-qt-client \\ # 使用指定的生成器生成代码。 --additional-properties=\u0026#34;optionalProjectFile=false,modelNamePrefix=D,packageName=QtDAPI,cppNamespace=DAPI\u0026#34; # 额外的参数 额外参数的含义可以到官方文档/generators/cpp-qt-client查看。\n执行这个命令后就可以在指定的目录下看到生成的代码。\n$ tree 3rdparty/client 3rdparty/API ├── README.md └── Config.cmake.in └── CMakeLists.txt └── DClientApi.h └── DClientApi.cpp ......... 然后在代码中就可以调用了，使用方法可以参考生成的README.md\n","permalink":"https://student-ice.github.io/posts/%E6%B5%85%E5%B0%9Dopenapi-generator/","summary":"最近看到深度之家项目使用openapi-generator生成http api, 供客户端调用用，于是很好奇这是什么，经过了一番研究，才发现他其实就是可以根据OpenAPI规范（以前称为Swagger规范）生成各种编程语言的HTTP API客户端、服务器端代码和文档的一个工具。\n我正好最近在用Qt开发一个网易云音乐客户端，所以就想着能不能也想深度之家那样用openapi-generator生成http api。 说干就干，首先去看了看官方文档，写的很详细了。使用方法有很多，我这里选择安装个CLI。\n我这里使用npm安装CLI,直接执行下面的命令，全局安装：\nsudo npm install @openapitools/openapi-generator-cli -g 然后根据符合OpenAPI规范的、有效的API文档生成客户端代码:\nopenapi-generator-cli generate \\ -i doc_path \\ # 符合OpenAPI规范的API文档(json格式或者yaml格式) -o code_path \\ # 要生成的客户端代码路径 -g cpp-qt-client \\ # 使用指定的生成器生成代码。 --additional-properties=\u0026#34;optionalProjectFile=false,modelNamePrefix=D,packageName=QtDAPI,cppNamespace=DAPI\u0026#34; # 额外的参数 额外参数的含义可以到官方文档/generators/cpp-qt-client查看。\n执行这个命令后就可以在指定的目录下看到生成的代码。\n$ tree 3rdparty/client 3rdparty/API ├── README.md └── Config.cmake.in └── CMakeLists.txt └── DClientApi.h └── DClientApi.cpp ......... 然后在代码中就可以调用了，使用方法可以参考生成的README.md","title":"浅尝openapi Generator"},{"content":"前言 Hugo 是一款基于 Go 语言而实现的静态网站生成器，具有简单易用、高效易扩展、快速部署的特点。 这里先给出 Hugo 的中英文官方文档，方便大家遇到问题时查阅：\nHugo 中文文档 Hugo 英文文档\n接下来就来看看，如何利用 Hugo 来搭建一个博客。\n1. 安装Hugo 当你打开Hugo的Github Release页面后，你会看到各个版本的Hugo安装包。选择最新的版本是一个明智的选择，因为它通常包含了最新的功能和修复的bug。\n在选择版本后，你需要根据你当前的操作系统选择对应的安装包进行下载。Hugo提供了多种操作系统的安装包，包括Windows、macOS和Linux。确保选择与你的操作系统兼容的安装包。\n安装完成后，你可以在命令行中输入hugo version来验证Hugo是否成功安装并显示当前安装的版本号。如果成功显示版本号，则说明Hugo已经安装成功。\n$ hugo version hugo v0.118.2-da7983ac4b94d97d776d7c2405040de97e95c03d linux/amd64 BuildDate=2023-08-31T11:23:51Z VendorInfo=gohugoio 现在你已经成功安装了Hugo，你可以开始使用它来创建和管理静态网站了。\n2. 创建博客目录 初始化网站目录 $ hugo new site blog 初始化之后，得到的，目录结构如下:\n$ tree blog blog ├── archetypes │ └── default.md ├── assets ├── content ├── data ├── hugo.toml ├── i18n ├── layouts ├── static └── themes 这里需要注意的是hugo.toml,这个配置文件是用来配置Hugo的一些全局参数的。这个文件默认有以下三个配置:\nbaseURL = \u0026#39;https://example.org/\u0026#39; languageCode = \u0026#39;en-us\u0026#39; title = \u0026#39;My New Hugo Site\u0026#39; 我不太喜欢toml的语法,所以我把它改成了hugo.yaml。\nbaseURL: \u0026#39;https://example.org/\u0026#39; languageCode: \u0026#39;en-us\u0026#39; title: \u0026#39;My New Hugo Site\u0026#39; 3. 安装主题 可以去Hugo官网找到你想要的主题,这里我选择了PaperMod主题，然后利用如下命令将主题下载到项目根目录的themes文件夹中:\ngit submodule add https://github.com/adityatelange/hugo-PaperMod themes/papermod 4. 配置主题 修改hugo.yaml文件\nbaseURL: \u0026#39;https://example.org/\u0026#39; languageCode: \u0026#39;en-us\u0026#39; title: \u0026#39;My New Hugo Site\u0026#39; theme: \u0026#39;papermod\u0026#39; # 设置主题 5. 预览网站 hugo server 运行hugo server后，浏览器打开http://localhost:1313/就可以看到你的网站了。\n因为还没有添加文章，所以内容会是空白的\n总结 以上就是利用Hugo搭建个人博客网站的基本步骤。\n希望大家博客网站搭建好之后，也可以开始写作和分享自己的想法和经验。\n","permalink":"https://student-ice.github.io/posts/hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/","summary":"前言 Hugo 是一款基于 Go 语言而实现的静态网站生成器，具有简单易用、高效易扩展、快速部署的特点。 这里先给出 Hugo 的中英文官方文档，方便大家遇到问题时查阅：\nHugo 中文文档 Hugo 英文文档\n接下来就来看看，如何利用 Hugo 来搭建一个博客。\n1. 安装Hugo 当你打开Hugo的Github Release页面后，你会看到各个版本的Hugo安装包。选择最新的版本是一个明智的选择，因为它通常包含了最新的功能和修复的bug。\n在选择版本后，你需要根据你当前的操作系统选择对应的安装包进行下载。Hugo提供了多种操作系统的安装包，包括Windows、macOS和Linux。确保选择与你的操作系统兼容的安装包。\n安装完成后，你可以在命令行中输入hugo version来验证Hugo是否成功安装并显示当前安装的版本号。如果成功显示版本号，则说明Hugo已经安装成功。\n$ hugo version hugo v0.118.2-da7983ac4b94d97d776d7c2405040de97e95c03d linux/amd64 BuildDate=2023-08-31T11:23:51Z VendorInfo=gohugoio 现在你已经成功安装了Hugo，你可以开始使用它来创建和管理静态网站了。\n2. 创建博客目录 初始化网站目录 $ hugo new site blog 初始化之后，得到的，目录结构如下:\n$ tree blog blog ├── archetypes │ └── default.md ├── assets ├── content ├── data ├── hugo.toml ├── i18n ├── layouts ├── static └── themes 这里需要注意的是hugo.toml,这个配置文件是用来配置Hugo的一些全局参数的。这个文件默认有以下三个配置:\nbaseURL = \u0026#39;https://example.org/\u0026#39; languageCode = \u0026#39;en-us\u0026#39; title = \u0026#39;My New Hugo Site\u0026#39; 我不太喜欢toml的语法,所以我把它改成了hugo.","title":"Hugo搭建个人博客网站"},{"content":"","permalink":"https://student-ice.github.io/about/","summary":"about","title":"About"}]